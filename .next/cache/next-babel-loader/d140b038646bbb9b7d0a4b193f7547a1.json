{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ACTUALIZAR_PEDIDO, ELIMINAR_PEDIDO, OBTENER_PEDIDOS_SINGLE } from '../../graphql/pedidos';\nexport default function Pedido(_ref) {\n  _s();\n\n  var pedido = _ref.pedido;\n  var id = pedido.id,\n      total = pedido.total,\n      _pedido$cliente = pedido.cliente,\n      nombre = _pedido$cliente.nombre,\n      telefono = _pedido$cliente.telefono,\n      email = _pedido$cliente.email,\n      estado = pedido.estado,\n      cliente = pedido.cliente;\n\n  var _useMutation = useMutation(ACTUALIZAR_PEDIDO),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      actualizarPedido = _useMutation2[0];\n\n  var _useMutation3 = useMutation(ELIMINAR_PEDIDO, {\n    update: function update(cache) {\n      var _cache$readQuery = cache.readQuery({\n        query: OBTENER_PEDIDOS_SINGLE\n      }),\n          obtenerPedidosVendedor = _cache$readQuery.obtenerPedidosVendedor;\n\n      cache.writeQuery({\n        query: OBTENER_PEDIDOS_SINGLE,\n        data: {\n          obtenerPedidosVendedor: obtenerPedidosVendedor.filter(function (pedido) {\n            return pedido.id !== id;\n          })\n        }\n      });\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      eliminarPedido = _useMutation4[0];\n\n  var _useState = useState(estado),\n      estadoPedido = _useState[0],\n      setEstadoPedido = _useState[1];\n\n  var _useState2 = useState(''),\n      clase = _useState2[0],\n      setClase = _useState2[1];\n\n  useEffect(function () {\n    if (estadoPedido) {\n      setEstadoPedido(estadoPedido);\n    }\n\n    clasePedido();\n  }, [estadoPedido]);\n\n  var clasePedido = function clasePedido() {\n    if (estadoPedido === 'PENDIENTE') {\n      setClase('border-yellow-500');\n    } else if (estadoPedido === 'COMPLETADO') {\n      setClase('border-green-500');\n    } else {\n      setClase('border-red-800');\n    }\n  };\n\n  var cambiarEstadoPedido = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(nuevoEstado) {\n      var _yield$actualizarPedi, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return actualizarPedido({\n                variables: {\n                  id: id,\n                  input: {\n                    estado: nuevoEstado,\n                    cliente: cliente.id\n                  }\n                }\n              });\n\n            case 3:\n              _yield$actualizarPedi = _context.sent;\n              data = _yield$actualizarPedi.data;\n              setEstadoPedido(data.actualizarPedido.estado);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function cambiarEstadoPedido(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return 'Desde Pedido';\n}\n\n_s(Pedido, \"L1yYRhLtwkpn76UcAfDGLMPSSuo=\", false, function () {\n  return [useMutation, useMutation];\n});\n\n_c = Pedido;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pedido\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/DGlamour/client/component/pedidos/Pedido.js"],"names":["React","useState","useEffect","useMutation","ACTUALIZAR_PEDIDO","ELIMINAR_PEDIDO","OBTENER_PEDIDOS_SINGLE","Pedido","pedido","id","total","cliente","nombre","telefono","email","estado","actualizarPedido","update","cache","readQuery","query","obtenerPedidosVendedor","writeQuery","data","filter","eliminarPedido","estadoPedido","setEstadoPedido","clase","setClase","clasePedido","cambiarEstadoPedido","nuevoEstado","variables","input","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport {\r\n  ACTUALIZAR_PEDIDO,\r\n  ELIMINAR_PEDIDO,\r\n  OBTENER_PEDIDOS_SINGLE,\r\n} from '../../graphql/pedidos';\r\n\r\nexport default function Pedido({ pedido }) {\r\n  const {\r\n    id,\r\n    total,\r\n    cliente: { nombre, telefono, email },\r\n    estado,\r\n    cliente,\r\n  } = pedido;\r\n  const [actualizarPedido] = useMutation(ACTUALIZAR_PEDIDO);\r\n  const [eliminarPedido] = useMutation(ELIMINAR_PEDIDO, {\r\n    update(cache) {\r\n      const { obtenerPedidosVendedor } = cache.readQuery({\r\n        query: OBTENER_PEDIDOS_SINGLE,\r\n      });\r\n\r\n      cache.writeQuery({\r\n        query: OBTENER_PEDIDOS_SINGLE,\r\n        data: {\r\n          obtenerPedidosVendedor: obtenerPedidosVendedor.filter(\r\n            (pedido) => pedido.id !== id\r\n          ),\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  const [estadoPedido, setEstadoPedido] = useState(estado);\r\n  const [clase, setClase] = useState('');\r\n  useEffect(() => {\r\n    if (estadoPedido) {\r\n      setEstadoPedido(estadoPedido);\r\n    }\r\n    clasePedido();\r\n  }, [estadoPedido]);\r\n\r\n  const clasePedido = () => {\r\n    if (estadoPedido === 'PENDIENTE') {\r\n      setClase('border-yellow-500');\r\n    } else if (estadoPedido === 'COMPLETADO') {\r\n      setClase('border-green-500');\r\n    } else {\r\n      setClase('border-red-800');\r\n    }\r\n  };\r\n\r\n  const cambiarEstadoPedido = async (nuevoEstado) => {\r\n    try {\r\n      const { data } = await actualizarPedido({\r\n        variables: {\r\n          id,\r\n          input: {\r\n            estado: nuevoEstado,\r\n            cliente: cliente.id,\r\n          },\r\n        },\r\n      });\r\n      setEstadoPedido(data.actualizarPedido.estado);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return 'Desde Pedido';\r\n}\r\n"]},"metadata":{},"sourceType":"module"}