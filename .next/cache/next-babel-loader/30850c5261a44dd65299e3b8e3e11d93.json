{"ast":null,"code":"import { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport fetch from 'node-fetch';\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: 'http://localhost:4000/graphql',\n      fetch,\n      credentials: 'include' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/DGlamour/client/apollo/withApollo.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","fetch","apolloClient","createApolloClient","ssrMode","link","uri","credentials","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIN,QAAJ,CAAa;AACjBO,MAAAA,GAAG,EAAE,+BADY;AAEjBL,MAAAA,KAFiB;AAGjBM,MAAAA,WAAW,EAAE,SAHI,CAGO;;AAHP,KAAb,CAFgB;AAOtBC,IAAAA,KAAK,EAAE,IAAIR,aAAJ;AAPe,GAAjB,CAAP;AASD;;AAED,OAAO,SAASS,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGT,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIO,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,YAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACT,YAAL,EAAmBA,YAAY,GAAGS,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,QAAMI,KAAK,GAAGjB,OAAO,CAAC,MAAMY,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import { useMemo } from 'react';\r\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\r\nimport fetch from 'node-fetch';\r\n\r\nlet apolloClient;\r\n\r\nfunction createApolloClient() {\r\n  return new ApolloClient({\r\n    ssrMode: typeof window === 'undefined',\r\n    link: new HttpLink({\r\n      uri: 'http://localhost:4000/graphql',\r\n      fetch,\r\n      credentials: 'include', // Additional fetch() options like `credentials` or `headers`\r\n    }),\r\n    cache: new InMemoryCache(),\r\n  });\r\n}\r\n\r\nexport function initializeApollo(initialState = null) {\r\n  const _apolloClient = apolloClient ?? createApolloClient();\r\n\r\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\r\n  // get hydrated here\r\n  if (initialState) {\r\n    _apolloClient.cache.restore(initialState);\r\n  }\r\n  // For SSG and SSR always create a new Apollo Client\r\n  if (typeof window === 'undefined') return _apolloClient;\r\n  // Create the Apollo Client once in the client\r\n  if (!apolloClient) apolloClient = _apolloClient;\r\n\r\n  return _apolloClient;\r\n}\r\n\r\nexport function useApollo(initialState) {\r\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\r\n  return store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}