{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\DGlamour\\\\client\\\\apollo\\\\apolloState.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { ApolloProvider } from '@apollo/client';\nimport { getDataFromTree } from '@apollo/react-ssr';\nimport { initializeApollo } from './withApollo';\nexport default function getApolloState(_x) {\n  return _getApolloState.apply(this, arguments);\n}\n\nfunction _getApolloState() {\n  _getApolloState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(Page) {\n    var apolloClient;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apolloClient = initializeApollo(); // Take a Next.js page, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire page once for every query. Check out Apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n\n            _context.next = 3;\n            return getDataFromTree(__jsx(ApolloProvider, {\n              client: apolloClient,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 14,\n                columnNumber: 5\n              }\n            }, __jsx(Page, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 15,\n                columnNumber: 7\n              }\n            })));\n\n          case 3:\n            return _context.abrupt(\"return\", apolloClient.cache.extract());\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _getApolloState.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/DGlamour/client/apollo/apolloState.js"],"names":["ApolloProvider","getDataFromTree","initializeApollo","getApolloState","Page","apolloClient","cache","extract"],"mappings":";;;;;AAAA,SAASA,cAAT,QAA+B,gBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,wBAA8BC,cAA9B;AAAA;AAAA;;;6EAAe,iBAA8BC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,YADO,GACQH,gBAAgB,EADxB,EAGb;AACA;AACA;AACA;AACA;;AAPa;AAAA,mBAQPD,eAAe,CACnB,MAAC,cAAD;AAAgB,cAAA,MAAM,EAAEI,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADmB,CARR;;AAAA;AAAA,6CAcNA,YAAY,CAACC,KAAb,CAAmBC,OAAnB,EAdM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { ApolloProvider } from '@apollo/client';\r\nimport { getDataFromTree } from '@apollo/react-ssr';\r\nimport { initializeApollo } from './withApollo';\r\n\r\nexport default async function getApolloState(Page) {\r\n  const apolloClient = initializeApollo();\r\n\r\n  // Take a Next.js page, determine which queries are needed to render,\r\n  // and fetch them. This method can be pretty slow since it renders\r\n  // your entire page once for every query. Check out Apollo fragments\r\n  // if you want to reduce the number of rerenders.\r\n  // https://www.apollographql.com/docs/react/data/fragments/\r\n  await getDataFromTree(\r\n    <ApolloProvider client={apolloClient}>\r\n      <Page />\r\n    </ApolloProvider>\r\n  );\r\n\r\n  return apolloClient.cache.extract();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}