{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ACTUALIZAR_PEDIDO, ELIMINAR_PEDIDO, OBTENER_PEDIDOS_SINGLE } from '../../graphql/pedidos';\nimport Swal from 'sweetalert2';\nexport default function Pedido({\n  pedido\n}) {\n  const {\n    id,\n    total,\n    cliente: {\n      nombre,\n      telefono,\n      email\n    },\n    estado,\n    cliente\n  } = pedido;\n  const [actualizarPedido] = useMutation(ACTUALIZAR_PEDIDO);\n  const [eliminarPedido] = useMutation(ELIMINAR_PEDIDO, {\n    update(cache) {\n      const {\n        obtenerPedidosVendedor\n      } = cache.readQuery({\n        query: OBTENER_PEDIDOS_SINGLE\n      });\n      cache.writeQuery({\n        query: OBTENER_PEDIDOS_SINGLE,\n        data: {\n          obtenerPedidosVendedor: obtenerPedidosVendedor.filter(pedido => pedido.id !== id)\n        }\n      });\n    }\n\n  });\n  const {\n    0: estadoPedido,\n    1: setEstadoPedido\n  } = useState(estado);\n  const {\n    0: clase,\n    1: setClase\n  } = useState('');\n  useEffect(() => {\n    if (estadoPedido) {\n      setEstadoPedido(estadoPedido);\n    }\n\n    clasePedido();\n  }, [estadoPedido]);\n\n  const clasePedido = () => {\n    if (estadoPedido === 'PENDIENTE') {\n      setClase('border-yellow-500');\n    } else if (estadoPedido === 'COMPLETADO') {\n      setClase('border-green-500');\n    } else {\n      setClase('border-red-800');\n    }\n  };\n\n  const cambiarEstadoPedido = async nuevoEstado => {\n    try {\n      const {\n        data\n      } = await actualizarPedido({\n        variables: {\n          id,\n          input: {\n            estado: nuevoEstado,\n            cliente: cliente.id\n          }\n        }\n      });\n      setEstadoPedido(data.actualizarPedido.estado);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const confirmarEliminarPedido = () => {\n    Swal.fire({\n      title: '¿Deseas eliminar a este pedido?',\n      text: 'Esta acción no se puede deshacer',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si, Eliminar',\n      cancelButtonText: 'No, Cancelar'\n    }).then(async result => {\n      if (result.value) {\n        try {\n          const data = await eliminarPedido({\n            variables: {\n              id\n            }\n          });\n          Swal.fire('Eliminado', data.eliminarPedido, 'success');\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    });\n  };\n\n  return 'Desde Pedido';\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/DGlamour/client/component/pedidos/Pedido.js"],"names":["React","useState","useEffect","useMutation","ACTUALIZAR_PEDIDO","ELIMINAR_PEDIDO","OBTENER_PEDIDOS_SINGLE","Swal","Pedido","pedido","id","total","cliente","nombre","telefono","email","estado","actualizarPedido","eliminarPedido","update","cache","obtenerPedidosVendedor","readQuery","query","writeQuery","data","filter","estadoPedido","setEstadoPedido","clase","setClase","clasePedido","cambiarEstadoPedido","nuevoEstado","variables","input","error","console","log","confirmarEliminarPedido","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport {\r\n  ACTUALIZAR_PEDIDO,\r\n  ELIMINAR_PEDIDO,\r\n  OBTENER_PEDIDOS_SINGLE,\r\n} from '../../graphql/pedidos';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport default function Pedido({ pedido }) {\r\n  const {\r\n    id,\r\n    total,\r\n    cliente: { nombre, telefono, email },\r\n    estado,\r\n    cliente,\r\n  } = pedido;\r\n  const [actualizarPedido] = useMutation(ACTUALIZAR_PEDIDO);\r\n  const [eliminarPedido] = useMutation(ELIMINAR_PEDIDO, {\r\n    update(cache) {\r\n      const { obtenerPedidosVendedor } = cache.readQuery({\r\n        query: OBTENER_PEDIDOS_SINGLE,\r\n      });\r\n\r\n      cache.writeQuery({\r\n        query: OBTENER_PEDIDOS_SINGLE,\r\n        data: {\r\n          obtenerPedidosVendedor: obtenerPedidosVendedor.filter(\r\n            (pedido) => pedido.id !== id\r\n          ),\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  const [estadoPedido, setEstadoPedido] = useState(estado);\r\n  const [clase, setClase] = useState('');\r\n  useEffect(() => {\r\n    if (estadoPedido) {\r\n      setEstadoPedido(estadoPedido);\r\n    }\r\n    clasePedido();\r\n  }, [estadoPedido]);\r\n\r\n  const clasePedido = () => {\r\n    if (estadoPedido === 'PENDIENTE') {\r\n      setClase('border-yellow-500');\r\n    } else if (estadoPedido === 'COMPLETADO') {\r\n      setClase('border-green-500');\r\n    } else {\r\n      setClase('border-red-800');\r\n    }\r\n  };\r\n\r\n  const cambiarEstadoPedido = async (nuevoEstado) => {\r\n    try {\r\n      const { data } = await actualizarPedido({\r\n        variables: {\r\n          id,\r\n          input: {\r\n            estado: nuevoEstado,\r\n            cliente: cliente.id,\r\n          },\r\n        },\r\n      });\r\n      setEstadoPedido(data.actualizarPedido.estado);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const confirmarEliminarPedido = () => {\r\n    Swal.fire({\r\n      title: '¿Deseas eliminar a este pedido?',\r\n      text: 'Esta acción no se puede deshacer',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Si, Eliminar',\r\n      cancelButtonText: 'No, Cancelar',\r\n    }).then(async (result) => {\r\n      if (result.value) {\r\n        try {\r\n          const data = await eliminarPedido({\r\n            variables: {\r\n              id,\r\n            },\r\n          });\r\n\r\n          Swal.fire('Eliminado', data.eliminarPedido, 'success');\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  return 'Desde Pedido';\r\n}\r\n"]},"metadata":{},"sourceType":"module"}